package muni.fi.bl.service.impl;

import muni.fi.bl.mappers.AuthorMapper;
import muni.fi.bl.service.AuthorService;
import muni.fi.dal.entity.Author;
import muni.fi.dal.repository.AuthorRepository;
import muni.fi.dtos.AuthorDto;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mapstruct.factory.Mappers;
import org.mockito.Mock;

import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;
import static org.mockito.Mockito.when;
import static org.mockito.MockitoAnnotations.openMocks;

class AuthorServiceImplTest {

    @Mock
    private AuthorRepository authorRepositoryMock;
    // tested class
    private AuthorService authorService;

    @BeforeEach
    void setUp() {
        openMocks(this);

        // mappers are not mocked as the implementation is not unit-tested because it is automatically generated by mapStruct
        AuthorMapper mapper = Mappers.getMapper(AuthorMapper.class);
        authorService = new AuthorServiceImpl(authorRepositoryMock, mapper);
    }

    @Test
    void getAll() {
        // prepare
        Author author1 = new Author("name1", "uco1", "student");
        Author author2 = new Author("name2", "uco2", "employee");
        when(authorRepositoryMock.findAll()).thenReturn(List.of(author1, author2));

        // tested method
        List<AuthorDto> authorDtos = authorService.getAll();

        // verify
        assertThat(authorDtos.size(), equalTo(2));
        assertThat(authorDtos.get(0).getName(), equalTo("name1"));
        assertThat(authorDtos.get(0).getUco(), equalTo("uco1"));
        assertThat(authorDtos.get(0).getType(), equalTo("student"));
        assertThat(authorDtos.get(1).getName(), equalTo("name2"));
        assertThat(authorDtos.get(1).getUco(), equalTo("uco2"));
        assertThat(authorDtos.get(1).getType(), equalTo("employee"));
    }
}